@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';

///
/// Implode a list into a string.
///
/// @param  {List}      $list - The list of strings to implode.
/// @param  {string}    $glue - The "glue" between elements in the result string.
/// @return {string}    The result string.
///
@function implode($list, $glue: ' ') {
  $result: null;
  $length: list.length($list);

  @for $i from 1 through $length {
    $e: list.nth($list, $i);

    @if $i == $length {
      $result: string.unquote('#{$result}#{$e}');
    } @else {
      $result: string.unquote('#{$result}#{$e}#{$glue}');
    }
  }

  @return $result;
}

///
/// Checks if a list contains a value(s).
///
/// @link   https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/validators/_contains.scss
///
/// @param  {List} $list   - The list to check against.
/// @param  {List} $values - A single value or list of values to check for.
/// @return {boolean}
///
@function contains($list, $values...) {
  @each $value in $values {
    @if meta.type-of(list.index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}

///
/// Return null rather than throwing an error if index is outside list range.
///
/// @param  {List}        $list  - The list to check against.
/// @param  {Number}      $index - A index of values to check for.
/// @return {String|Null} Returns item or NULL.
///
@function nth-or-null($list, $index) {
  @return if(list.length($list) >= $index, list.nth($list, $index), null);
}
